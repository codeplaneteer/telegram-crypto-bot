import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import curse
import settings

logging.basicConfig(level=logging.INFO)


 #–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
bot = Bot(token=f"{settings.TG_TOKEN}")

dp = Dispatcher(bot)

HelpButton = KeyboardButton("–ü–æ–º–æ—â—åüÜò")
CurseButton = KeyboardButton("–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç‚ÄºÔ∏è")
InfoButton = KeyboardButton("–û –±–æ—Ç–µü§®")
AuthorButton = KeyboardButton("–ê–≤—Ç–æ—Ä—ãüë§")

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(HelpButton, CurseButton, InfoButton, AuthorButton)


@dp.message_handler(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ãüëã",
                         reply_markup=main_kb)


@dp.message_handler(content_types='text')
async def MainButton(message: types.Message):
    if message.text == "–ê–≤—Ç–æ—Ä—ãüë§":
        await message.reply("–°–æ–∑–¥–∞—Ç–µ–ª—å: @hkkk89", reply_markup=main_kb)

    elif message.text == "–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç‚ÄºÔ∏è":

        with open("CoinData.txt", "r") as file:
            curse.get_AllCount()
            src = file.read()
            await message.reply(src, parse_mode="HTML")

    elif message.text == "–û –±–æ—Ç–µü§®":
        await message.reply(
            "–≠—Ç–æ –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –æ–Ω –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Ç–µ–º—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
            reply_markup=main_kb)

    elif message.text == "–ü–æ–º–æ—â—åüÜò":
        await message.reply("–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –Ω–µ–¥–æ—á–µ—Ç –∏–ª–∏ –±–∞–≥, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @hkkk89",
                            reply_markup=main_kb)

    else:
        await message.reply("–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–º–∞–Ω–¥—ã")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
